"""remove_rule

Revision ID: e9d22e1339d6
Revises: 25b8f47e075c
Create Date: 2016-07-15 14:54:03.556000

"""

# revision identifiers, used by Alembic.
revision = 'e9d22e1339d6'
down_revision = '25b8f47e075c'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()





def upgrade_error_data():
    ### commands auto generated by Alembic - please adjust! ###
    pass
    ### end Alembic commands ###


def downgrade_error_data():
    ### commands auto generated by Alembic - please adjust! ###
    pass
    ### end Alembic commands ###


def upgrade_job_tracker():
    ### commands auto generated by Alembic - please adjust! ###
    pass
    ### end Alembic commands ###


def downgrade_job_tracker():
    ### commands auto generated by Alembic - please adjust! ###
    pass
    ### end Alembic commands ###


def upgrade_user_manager():
    ### commands auto generated by Alembic - please adjust! ###
    pass
    ### end Alembic commands ###


def downgrade_user_manager():
    ### commands auto generated by Alembic - please adjust! ###
    pass
    ### end Alembic commands ###


def upgrade_validation():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('rule')
    op.drop_table('rule_timing')
    ### end Alembic commands ###


def downgrade_validation():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('rule_timing',
    sa.Column('rule_timing_id', sa.INTEGER(), server_default=sa.text(u"nextval('rule_timing_rule_timing_id_seq'::regclass)"), nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('rule_timing_id', name=u'rule_timing_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('rule',
    sa.Column('rule_id', sa.INTEGER(), nullable=False),
    sa.Column('file_column_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rule_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rule_text_1', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rule_text_2', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rule_timing_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('rule_label', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('file_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('target_file_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('original_label', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['file_column_id'], [u'file_columns.file_column_id'], name=u'rule_file_column_id_fkey'),
    sa.ForeignKeyConstraint(['file_id'], [u'file_type.file_id'], name=u'fk_file_id'),
    sa.ForeignKeyConstraint(['rule_timing_id'], [u'rule_timing.rule_timing_id'], name=u'fk_rule_timing_id'),
    sa.ForeignKeyConstraint(['rule_type_id'], [u'rule_type.rule_type_id'], name=u'rule_rule_type_id_fkey'),
    sa.ForeignKeyConstraint(['target_file_id'], [u'file_type.file_id'], name=u'fk_target_file_id'),
    sa.PrimaryKeyConstraint('rule_id', name=u'rule_pkey')
    )
    ### end Alembic commands ###

